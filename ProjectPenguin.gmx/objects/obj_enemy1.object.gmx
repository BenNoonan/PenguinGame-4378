<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy1</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum state{ idle, chase };
state = state.idle; //idle
dir = -1; //left
vsp = 0;
hsp = 0;
movespeed = 2.2;
avoid_ledges = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case state.idle:{
        avoid_ledges = true;
         //hsp = max((dir * movespeed), (hsp*0.8)); //decellerate
         hsp = dir * movespeed;
         vsp = min(7,vsp+0.4);
         if(distance_to_object(obj_player) &lt; 96){
            hsp *= 2;
            state = state.chase;
         }
         break;
     }
    case state.chase:{
        avoid_ledges = false;
        dir = sign(obj_player.x - x);
        if(obj_player.x - x == 0 &amp;&amp; place_meeting(x,y+1,obj_wall)) vsp -= 3;
        hsp += 0.5 * dir; //accellerate
        vsp = min(7,vsp+0.05);
        
        if(distance_to_object(obj_player) &gt; 130) state = state.idle;
        break;
    }
}

// Enemy Collision
if(place_meeting(x,y,obj_player)){
    if(obj_player.y &lt; y-16) // or 32?
    {
        with(obj_player) vsp = -jumpspeed*0.5; // bounce off head 
        instance_destroy();
    }
    else{
        if(global.checkpointR != 0){
            room_goto(global.checkpointR);
        }
        else {
            room_restart();
        }
    }
        
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall))
    {
        x += sign(hsp);
    }
    hsp = 0;
    dir *= -1;
}
x += hsp;
 
//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
    
    //if(avoid_ledges &amp;&amp; !position_meeting(x+(sprite_width/2)*dir, y+(sprite_height/2)+8, obj_wall))
    //{  dir *= -1; }

}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
